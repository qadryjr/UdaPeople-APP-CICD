                                    ########## UdaPeople Project By Mahmoud Qadry ###########
version: 2.1

orbs:
  node: circleci/node@5.0.3
  slack: circleci/slack@4.12.0
##Visit the link below to findout the version of the current slack orb
#https://circleci.com/developer/orbs/orb/circleci/slack 

commands:
  notifications_when_failure:
    steps:
     - slack/notify:
        event: fail
        channel: qadry
        template: basic_fail_1

  install_awscli:
    steps:
     - run:
         name: Install AWSCLI
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    steps:
     - run:
         name: Install Ansible on Ubuntu based
         command: |
            sudo apt update -y 
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y 

  install_nodejs:
    steps:
     - run:
         name: Install NodeJs 
         command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install nodejs -y           

  destroy_environment:
    steps:
     - run:
         name: Destroy environment
         when: on_fail
         command: |
          aws cloudformation delete-stack --stack-name UdaPeople-Backend-${CIRCLE_WORKFLOW_ID:0:5}
          aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive  
          aws cloudformation delete-stack --stack-name UdaPeople-Frontend-${CIRCLE_WORKFLOW_ID:0:5}                       


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESSFULLY_MIGRATED=$(curl --insecure https://kvdb.io/${QADRY_KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESSFULLY_MIGRATED == 1));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
            
jobs:

  Build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build-frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-pack
      - notifications_when_failure    

  Build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: Build-backend
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-pack
      - notifications_when_failure    

  UnitTest-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-pack]
      - run:
          name: UnitTest-frontend
          command: |
            cd frontend
            npm install
            npm test
      - notifications_when_failure      
    
                
  UnitTest-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: UnitTest-backend
          command: |
             cd backend
             npm install
             npm test
      - notifications_when_failure       
            
  Scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-pack]
      - run:
          name: Scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notifications_when_failure      

  Scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: Scan-backend
          command: |
             cd backend
             npm install
             npm audit fix
             npm audit fix
             npm audit fix --force
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - notifications_when_failure       
      

  Deploy-Infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Qadry-Udapeople \
              --stack-name "UdaPeople-Backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Qadry-Udapeople \
              --stack-name "UdaPeople-Frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy_environment      

  Configure-Infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      #Install dependencies
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["69:8e:25:11:49:9f:c7:96:ff:d4:30:9a:a0:51:20:a2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment      

  Run-Migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 
      - run:
          name: Send migration results to kvdb.io site
          command: |
            cat ~/project/backend/migrations_dump.txt

            if grep -q "success" ~/backend/migrations_dump.txt
            then 
              curl --insecure https://kvdb.io/${QADRY_KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:5} -d '1'
            else
              curl --insecure https://kvdb.io/${QADRY_KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:5} -d '0'
            fi
      - destroy_environment
      - revert-migrations        

  Deploy-Frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env 
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend 
            npm run build 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive 
      - destroy_environment
      - revert-migrations      
                    
  Deploy-Backend:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["69:8e:25:11:49:9f:c7:96:ff:d4:30:9a:a0:51:20:a2"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]    
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run: 
          name: Backend Packaging
          command: |
             cd backend
             npm run build
             tar -czf artifact.tar.gz dist/* package*

             cd ..
             cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files 
      - run:
          name: Backend Deployment
          command: |
             export TYPEORM_MIGRATIONS=./migrations/*.ts
             export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
             export TYPEORM_MIGRATIONS_DIR=./migrations

             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml 

      - destroy_environment
      - revert-migrations  
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
  notifications_when_pass:
    docker:
      - image: cimg/node:13.8.0
    steps:  
      - slack/notify:
          channel: qadry
          event: pass
          template: success_tagged_deploy_1   

workflows:
  Qadry Workflow:
    jobs:
      - Build-frontend
      - Build-backend
      - UnitTest-frontend:
          requires: [Build-frontend]
      - UnitTest-backend:
          requires: [Build-backend]
      - Scan-frontend:
          requires: [Build-frontend]    
      - Scan-backend:
          requires: [Build-backend]
      - notifications_when_pass:
          requires:
             - UnitTest-frontend 
             - UnitTest-backend
             - Scan-frontend
             - Scan-backend
      - Deploy-Infrastructure:
          requires: [UnitTest-frontend, UnitTest-backend, Scan-frontend, Scan-backend]
          filters:
            branches:
              only: [master]
      - Configure-Infrastructure:
          requires: [Deploy-Infrastructure]
      - Run-Migrations:
          requires: [Configure-Infrastructure]
      - Deploy-Frontend:
          requires: [Run-Migrations]
      - Deploy-Backend:
          requires: [Run-Migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
