                                    ########## UdaPeople Project By Mahmoud Qadry ###########
version: 2.1

orbs:
  node: circleci/node@5.0.3
  slack: circleci/slack@4.12.0
#Visit the link below to findout the version of the current slack orb
#https://circleci.com/developer/orbs/orb/circleci/slack 

commands:
  notifications_when_failure:
    steps:
     - slack/notify:
        event: fail
        channel: qadry
        template: basic_fail_1

  install_awscli:
    steps:
     - run:
         name: Install AWSCLI
         command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
               unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    steps:
     - run:
         name: Install Ansible on Ubuntu based
         command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible                   
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:

  Build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build-frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-pack
      - notifications_when_failure    

  Build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: Build-backend
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-pack
      - notifications_when_failure    

  UnitTest-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-pack]
      - run:
          name: UnitTest-frontend
          command: |
            cd frontend
            npm install
            npm test
      - notifications_when_failure      
    
                
  UnitTest-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: UnitTest-backend
          command: |
             cd backend
             npm install
             npm test
      - notifications_when_failure       
            
  Scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-pack]
      - run:
          name: Scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notifications_when_failure      

  Scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-pack]
      - run:
          name: Scan-backend
          command: |
             cd backend
             npm install
             npm audit fix
             npm audit fix
             npm audit fix --force
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
      - notifications_when_failure       
      

  Deploy-Infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy 
              --template-file .circleci/files/backend.yml \
              --tags project=Qadry-Udapeople \
              --stack-name "UdaPeople-Backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Qadry-Udapeople \
              --stack-name "UdaPeople-Frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}"
            --query 'Reservations[*].Instances[*].PublicIpAddress'
            --output qadry.txt)

            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
  notifications_when_pass:
    docker:
      - image: cimg/node:13.8.0
    steps:  
      - slack/notify:
          channel: qadry
          event: pass
          template: success_tagged_deploy_1   

workflows:
  Qadry Workflow:
    jobs:
      - Build-frontend
      - Build-backend
      - UnitTest-frontend:
          requires: [Build-frontend]
      - UnitTest-backend:
          requires: [Build-backend]
      - Scan-frontend:
          requires: [Build-frontend]    
      - Scan-backend:
          requires: [Build-backend]
      - notifications_when_pass:
          requires:
             - UnitTest-frontend 
             - UnitTest-backend
             - Scan-frontend
             - Scan-backend
      - Deploy-Infrastructure:
          requires: [UnitTest-frontend, UnitTest-backend, Scan-frontend, Scan-backend]
          filters:
            branches:
              only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]